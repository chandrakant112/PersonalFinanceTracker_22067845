@page "/Report"
@using MudBlazor
@using System.Globalization
@inject IAddTransactionServices AddTransactionServices
@inject ISnackbar Snackbar
@using System.Diagnostics
@using System.Collections.Generic
@using System.Linq

<div>
    <h4 style="text-align: center; color: #2c3e50; padding: 20px 0; margin-bottom: 30px; font-weight: 600; text-transform: uppercase; border-bottom: 2px solid #3498db; font-family: 'Segoe UI', Arial, sans-serif; letter-spacing: 1px;">Visualize Your Financial Journey: Comprehensive Transaction Insights</h4>
    <br /> <br />
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options" />

</div>

@code {
    private int Index = -1; // Default value cannot be 0 -> first selected index is 0.
    public ChartOptions Options = new ChartOptions();

    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTransactions = await AddTransactionServices.GetAllTransactionsAsync();
            if (allTransactions != null && allTransactions.Any())
            {
                // Group transactions by month and calculate totals for Debit, Credit, and Debt
                var groupedData = allTransactions
                    .GroupBy(t => t.Date.ToString("MMM", CultureInfo.InvariantCulture)) // Group by month name
                    .OrderBy(g => DateTime.ParseExact(g.Key, "MMM", CultureInfo.InvariantCulture)) // Ensure proper month order
                    .ToDictionary(
                        g => g.Key,
                        g => new
                        {
                            Debit = g.Where(t => t.Type?.ToLower() == "debit").Sum(t => (double)t.Amount),
                            Credit = g.Where(t => t.Type?.ToLower() == "credit").Sum(t => (double)t.Amount),
                            Debt = g.Where(t => t.Type?.ToLower() == "debt").Sum(t => (double)t.Amount)
                        });

                // Populate XAxisLabels
                XAxisLabels = groupedData.Keys.ToArray();

                // Populate Series data
                Series = new List<ChartSeries>
                {
                    new ChartSeries
                    {
                        Name = "Debit",
                        Data = groupedData.Values.Select(d => d.Debit).ToArray()
                    },
                    new ChartSeries
                    {
                        Name = "Credit",
                        Data = groupedData.Values.Select(d => d.Credit).ToArray()
                    },
                    new ChartSeries
                    {
                        Name = "Debt",
                        Data = groupedData.Values.Select(d => d.Debt).ToArray()
                    }
                };
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error fetching transaction data: {ex.Message}");
            Snackbar.Add("Failed to load transaction data.", Severity.Error);
        }
    }
}
